import axios from 'axios';

const apiUrl =  import.meta.env.VITE_API_URL
const API = axios.create({
  baseURL:  apiUrl
});

const PUBLIC_ROUTES = ['/login', '/signup', '/search','/','/myQueue','/VerifyToken']; // Add your public paths here

// Helper function to check if current path is public
const isPublicRoute = () => {
  const currentPath = window.location.pathname;
  return PUBLIC_ROUTES.filter(route => currentPath == route);
};

API.interceptors.request.use(

  config => {
  
   
    // Get token from localStorage
    const token = localStorage.getItem('user') 
      ? JSON.parse(localStorage.getItem('user')) 
      : null;

      if (isPublicRoute().length > 0 && !token) {
        return config;
      }
      if (!token) {
        window.location.href = '/login'; 
        return Promise.reject(new Error("No access token available"));
      }
    // If token exists, add it to the header
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

API.interceptors.response.use(
    response => response,
    async error => {
      const originalRequest = error.config;

      if (isPublicRoute().length > 0) {
        return Promise.reject(error);
      }
      // If we receive a 401 and haven't retried yet, attempt to refresh the token.
      if (error.response.status === 401 && !originalRequest._retry) {
        originalRequest._retry = true;
        try {
          // Retrieve your refresh token (ideally stored separately or in a secure HTTP-only cookie).
          const refreshToken =  JSON.parse(localStorage.getItem('refreshToken')) 
          const accessToken =  JSON.parse(localStorage.getItem('user')) 
          
          // Call your refresh token endpoint. Adjust the endpoint and payload as needed.
          const { data } = await axios.post(
            apiUrl+"/Auth/RefreshToken", 
            { accessToken: accessToken, refreshToken: refreshToken  }
          );
          
          // Assume data.accessToken is your new token.
        //   const user = JSON.parse(localStorage.getItem('user')) || {};
        //   user.accessToken = data.accessToken;
          
          // Save the updated user object.
          localStorage.setItem('user', JSON.stringify(data.accessToken));
          
          // Update default headers and the original request's headers.
          API.defaults.headers.common['Authorization'] = `Bearer ${data.accessToken}`;
          originalRequest.headers['Authorization'] = `Bearer ${data.accessToken}`;
          
          // Retry the original request with the new token.
          return API(originalRequest);
        } catch (refreshError) {
          // If refresh fails, clear stored tokens and redirect to login.
          localStorage.removeItem('user');
          localStorage.removeItem('refreshToken');
          window.location.href = '/login';
          console.log(refreshError)
          return Promise.reject(refreshError);
        }
      }
      return Promise.reject(error);
    }
);

export default API;