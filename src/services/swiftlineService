import axios from "axios";
import API from "./APIService";

//const SWIFTLINE_API_BASE_URL = "https://swiftline-cvbsdhauepbcambe.canadacentral-01.azurewebsites.net/api/v1/";

//const SWIFTLINE_API_BASE_URL = "http://localhost:5267/api/v1/";

const apiUrl = import.meta.env.VITE_API_URL;

export const eventsList = () =>
  API.get(apiUrl + "Event/GetAllEvents");

export const createEvent = (event) =>
  API.post(apiUrl + "Event/CreateEvent", event);



// export const getEmployeeById = (id) =>
//   axios.get(EMPLOYEE_API_BASE_URL + "/" + id);

export const eventQueueInfo = (eventId) =>
  API.get(apiUrl + "Event/GetEventQueue/" + eventId);

export const UserEvents = () => API.get(apiUrl + "Event/GetUserEvents");
export const updateEvent = (event) =>
  API.put(apiUrl + "Event/EditEvent", event);

export const joinLine = (eventId) =>
  API.post(apiUrl + "Event/JoinEvent?EventId=" + eventId);

export const validateToken = (token) =>
  API.post(apiUrl + "Auth/VerifyToken?token=" + token);
export const deleteEvent = (id) =>
  API.delete(apiUrl + "Event/DeleteEvent/"+id);

// export const deleteEmployee = (id) =>
//   axios.delete(EMPLOYEE_API_BASE_URL + "/" + id);

export const lineInfo = function (queue) {
  const lineMemberId = queue.lineMemberId;
  return API.get(apiUrl + "Line/GetLineInfo/" + lineMemberId);
};

export const GetUserLineInfo = () => API.get(apiUrl + "Line/GetUserLineInfo");
export const GetUserQueueStatus = () =>
  API.get(apiUrl + "Line/GetUserQueueStatus");

export const fetchEventById = (eventId) =>
  API.get(apiUrl + "Event/GetEvent/" + eventId);

export const loginUser = async (loginRequest) => {
  try {
    const response = await axios.post(apiUrl + "Auth/Login", loginRequest);
    if (response.data.data.accessToken) {
      const valueToken = JSON.stringify(response.data.data.accessToken);
      const refreshToken = JSON.stringify(response.data.data.refreshToken);
      localStorage.setItem("user", valueToken);
      localStorage.setItem("refreshToken", refreshToken);
      localStorage.setItem("userId", JSON.stringify(response.data.data.userId));
    }
    return response.data;
  } catch (error) {
    if (error.response) {
      // The server responded with a status code outside the 2xx range
      console.log("Error status:", error.response.status);
      console.log("Error data:", error.response.data);

      // You can throw the server's error message instead of Axios's generic one
      throw error.response.data;
    } else if (error.request) {
      // The request was made but no response was received
      console.log("Error request:", error.request);
      throw new Error("No response received from server");
    } else {
      // Something else caused the error
      console.log("Error message:", error.message);
      throw error;
    }
  }
};

export const SignUpUser = async (SignInRequest) => {
  try {
    const response = await axios.post(apiUrl + "Auth/SignUp", SignInRequest);
    if (response.data.token) {
      localStorage.setItem("user", JSON.stringify(response.data.accessToken));
      localStorage.setItem(
        "refreshToken",
        JSON.stringify(response.data.refreshToken)
      );
      localStorage.setItem("userId", JSON.stringify(response.data.data.userId));
    }
    return response.data;
  } catch (error) {
    if (error.response) {
      // The server responded with a status code outside the 2xx range
      console.log("Error status:", error.response.status);
      console.log("Error data:", error.response.data);

      // You can throw the server's error message instead of Axios's generic one
      throw error.response.data;
    } else if (error.request) {
      // The request was made but no response was received
      console.log("Error request:", error.request);
      throw new Error("No response received from server");
    } else {
      // Something else caused the error
      console.log("Error message:", error.message);
      throw error;
    }
  }
};
